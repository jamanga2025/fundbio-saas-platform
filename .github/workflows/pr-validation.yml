name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Pull Request
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npm run postinstall
      
    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|security)(\(.+\))?: .+ ]]; then
          echo "PR title must follow conventional commits format"
          exit 1
        fi
        
    - name: Check for breaking changes
      run: |
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -E "(package\.json|schema\.prisma|middleware\.ts)" || exit 0
        echo "⚠️ Breaking changes detected - ensure proper versioning"
        
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Run security tests
      run: npm run test:security
      
    - name: Run all tests
      run: npm test -- --run
      
    - name: Check test coverage
      run: npm run test:coverage
      
    - name: Validate security requirements
      run: |
        echo "🔍 Checking security requirements..."
        
        # Check for security middleware
        if [ ! -f "src/middleware.ts" ]; then
          echo "❌ Security middleware missing"
          exit 1
        fi
        
        # Check for security headers
        if ! grep -q "X-Frame-Options" src/middleware.ts; then
          echo "❌ Security headers missing"
          exit 1
        fi
        
        # Check for authentication
        if [ ! -f "src/server/auth.ts" ]; then
          echo "❌ Authentication config missing"
          exit 1
        fi
        
        echo "✅ Security requirements met"
        
    - name: Validate database changes
      run: |
        if git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -q "prisma/schema.prisma"; then
          echo "🗄️ Database schema changes detected"
          echo "📝 Ensure migration files are included"
          
          # Check if migration files exist
          if [ ! -d "prisma/migrations" ]; then
            echo "❌ No migration files found"
            exit 1
          fi
          
          echo "✅ Migration files found"
        fi
        
    - name: Build application
      run: npm run build
      
    - name: Generate PR summary
      run: |
        echo "## PR Validation Summary" > pr-summary.md
        echo "✅ TypeScript check passed" >> pr-summary.md
        echo "✅ Linting passed" >> pr-summary.md
        echo "✅ Security tests passed" >> pr-summary.md
        echo "✅ All tests passed" >> pr-summary.md
        echo "✅ Build successful" >> pr-summary.md
        echo "✅ Security requirements met" >> pr-summary.md
        
    - name: Comment PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  size-impact:
    runs-on: ubuntu-latest
    name: Bundle Size Impact
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build current branch
      run: npm run build
      
    - name: Analyze bundle size
      run: |
        echo "📦 Bundle size analysis would go here"
        # In a real implementation, you'd use tools like:
        # - webpack-bundle-analyzer
        # - bundlesize
        # - size-limit
        
  accessibility:
    runs-on: ubuntu-latest
    name: Accessibility Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      
    - name: Wait for app to start
      run: sleep 10
      
    - name: Run accessibility tests
      run: |
        echo "♿ Accessibility tests would run here"
        # In a real implementation, you'd use tools like:
        # - axe-core
        # - lighthouse-ci
        # - pa11y
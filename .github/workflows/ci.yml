name: CI/CD Pipeline with Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npm run postinstall
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm test -- --run
      
    - name: Run security tests
      run: npm run test:security
      
    - name: Run test coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: typescript, javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'fundbio-dashboard'
        path: '.'
        format: 'JSON'
        
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-results
        path: reports/

  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma client
      run: npm run postinstall
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        
    - name: Deploy to Railway Staging
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service staging --environment staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        
    - name: Deploy to Railway Production
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service production --environment production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: Run database migrations
      run: |
        railway run --service production --environment production -- npm run db:push
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  security-monitoring:
    runs-on: ubuntu-latest
    name: Security Monitoring
    if: always()
    needs: [test, security-scan, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Security notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Security tests failed in FundBio Dashboard CI/CD'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Create security report
      if: always()
      run: |
        echo "# Security Report - $(date)" > security-report.md
        echo "## Test Results" >> security-report.md
        echo "- Security Tests: ${{ needs.test.result }}" >> security-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> security-report.md
        echo "- Build: ${{ needs.build.result }}" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
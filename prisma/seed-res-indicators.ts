import { PrismaClient, CategoriaPrefijo, EscalaType, UnidadType } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üåø Implementando indicadores RES (Resiliencia)...');

  // Buscar el proyecto existente
  const proyecto = await prisma.proyecto.findFirst();
  if (!proyecto) {
    console.error('‚ùå No se encontr√≥ ning√∫n proyecto. Ejecute primero el seed principal.');
    process.exit(1);
  }

  console.log('üìã Proyecto encontrado:', proyecto.nombre);

  // Definir los 12 indicadores RES seg√∫n JSON oficial
  const indicadoresRES = [
    {
      codigo: 'RES-001',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Especies adaptadas al clima futuro',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.PORCENTAJE,
      origen_calculo: 'Porcentaje de especies vegetales plantadas que est√°n adaptadas a las proyecciones clim√°ticas 2050',
      objetivos_2025: 'Al menos 70% de especies plantadas adaptadas al clima futuro',
      observaciones: 'Se consideran especies resistentes a sequ√≠a, altas temperaturas y fen√≥menos extremos',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-002',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Poblaci√≥n protegida frente al riesgo de inundaci√≥n',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.NUMERO,
      origen_calculo: 'N√∫mero de habitantes que se benefician de las infraestructuras de drenaje sostenible implementadas',
      objetivos_2025: 'Proteger a 15.000 habitantes del riesgo de inundaci√≥n',
      observaciones: 'Incluye poblaci√≥n directamente beneficiada por jardines de lluvia, pavimentos permeables y sistemas SUDS',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-003',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Volumen de agua de lluvia interceptada',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.OTRO, // m3
      origen_calculo: 'Volumen anual de agua pluvial captada por cubiertas verdes, jardines de lluvia y sistemas de infiltraci√≥n',
      objetivos_2025: 'Interceptar 8.500 m¬≥ anuales de agua pluvial',
      observaciones: 'Medici√≥n basada en superficie captadora y precipitaci√≥n media anual (450mm)',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-004',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Volumen de agua de lluvia interceptada redirigida a suelo f√©rtil',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.PORCENTAJE,
      origen_calculo: 'Porcentaje del agua interceptada que se infiltra en suelo con capacidad de retenci√≥n y biodiversidad',
      objetivos_2025: 'Redirigir 80% del agua interceptada a suelo f√©rtil',
      observaciones: 'Excluye agua dirigida a sistemas de drenaje convencional o superficies impermeables',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-005',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Volumen anual de agua empleada en riego municipal',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.OTRO, // m3 por m2 √°rea verde
      origen_calculo: 'Metros c√∫bicos de agua empleados anualmente para riego por cada metro cuadrado de √°rea verde municipal',
      objetivos_2025: 'Reducir el consumo a 0.8 m¬≥/m¬≤ √°rea verde mediante especies resistentes',
      observaciones: 'Incluye agua potable y reutilizada para mantenimiento de jardines p√∫blicos',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-006',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Volumen anual de agua reutilizada en riego municipal',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.OTRO, // m3 por m2 √°rea verde
      origen_calculo: 'Metros c√∫bicos de agua reutilizada (grises, pluviales, regeneradas) por metro cuadrado de √°rea verde',
      objetivos_2025: 'Alcanzar 0.4 m¬≥/m¬≤ de agua reutilizada (50% del riego total)',
      observaciones: 'Incluye sistemas de recogida pluvial, reutilizaci√≥n de aguas grises y regeneraci√≥n de aguas residuales',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-007',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Superficie con estado erosi√≥n grave o muy grave',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.M2,
      origen_calculo: 'Superficie en metros cuadrados afectada por procesos erosivos severos antes y despu√©s de la intervenci√≥n',
      objetivos_2025: 'Reducir superficie erosionada a menos de 500 m¬≤',
      observaciones: 'Se mide mediante √≠ndices de erosi√≥n del suelo y cobertura vegetal protectora',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-008',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Superficie anual afectada por incendios',
      escala: EscalaType.PROYECTO,
      unidad: UnidadType.M2,
      origen_calculo: 'Superficie en metros cuadrados afectada anualmente por incendios en √°reas del proyecto',
      objetivos_2025: 'Mantener superficie afectada por fuego menor a 100 m¬≤ anuales',
      observaciones: 'Incluye medidas preventivas: cortafuegos verdes, especies ign√≠fugas, mantenimiento preventivo',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-009',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Da√±os materiales anuales generados por fen√≥menos meteorol√≥gicos extremos',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.EURO,
      origen_calculo: 'Valoraci√≥n econ√≥mica anual de da√±os causados por tormentas, granizo, vientos fuertes y sequ√≠as',
      objetivos_2025: 'Reducir da√±os meteorol√≥gicos a menos de 50.000‚Ç¨ anuales',
      observaciones: 'Se incluyen da√±os a infraestructuras verdes, mobiliario urbano y espacios p√∫blicos',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-010',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Ingresos anuales hospitalarios por efectos de calor',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.NUMERO,
      origen_calculo: 'N√∫mero de ingresos hospitalarios anuales relacionados con golpes de calor, deshidrataci√≥n e hipertermia',
      objetivos_2025: 'Reducir ingresos por calor a menos de 25 casos anuales',
      observaciones: 'Coordinaci√≥n con sistema sanitario para seguimiento epidemiol√≥gico en poblaci√≥n vulnerable',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-011',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Presencia o establecimiento del mosquito Aedes albopictus',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.OTRO, // Reporte de presencia (Si/No) / Casos de transmisi√≥n de enfermedad
      origen_calculo: 'Monitoreo de presencia del mosquito tigre y casos de enfermedades transmitidas',
      objetivos_2025: 'Mantener ausencia de Aedes albopictus y cero casos de transmisi√≥n',
      observaciones: 'Control mediante gesti√≥n de agua estancada y seguimiento entomol√≥gico especializado',
      proyecto_id: proyecto.id,
    },
    {
      codigo: 'RES-012',
      categoria_prefijo: CategoriaPrefijo.RES,
      indicador: 'Concentraci√≥n atmosf√©rica de polen potencialmente alerg√©nico',
      escala: EscalaType.MUNICIPAL,
      unidad: UnidadType.OTRO, // granos de polen / m3 de aire
      origen_calculo: 'Medici√≥n de granos de polen por metro c√∫bico de aire de especies con alta capacidad alerg√©nica',
      objetivos_2025: 'Mantener concentraci√≥n pol√≠nica <50 granos/m¬≥ en periodo cr√≠tico',
      observaciones: 'Monitoreo espec√≠fico de Platanus, Olea, Cupressus y gram√≠neas durante primavera',
      proyecto_id: proyecto.id,
    },
  ];

  console.log('üìù Creando indicadores RES...');

  // Crear cada indicador RES
  for (const indicadorData of indicadoresRES) {
    console.log(`   ‚Üí Creando ${indicadorData.codigo}: ${indicadorData.indicador}`);
    
    const indicador = await prisma.indicadorGeneral.create({
      data: indicadorData,
    });

    // Crear valores de ejemplo realistas para cada indicador
    const valoresEjemplo = {
      'RES-001': { base: 45, intermedio: 62, final: 75, obs: 'Incremento progresivo de especies clim√°ticamente resilientes: encinas, lavanda, romero' },
      'RES-002': { base: 8500, intermedio: 12000, final: 15000, obs: 'Extensi√≥n gradual de sistemas SUDS: jardines de lluvia en 5 barrios' },
      'RES-003': { base: 3200, intermedio: 6100, final: 8500, obs: '15 cubiertas verdes + 8 jardines de lluvia captando 450mm precipitaci√≥n anual' },
      'RES-004': { base: 65, intermedio: 72, final: 82, obs: 'Mejora en dise√±o de infiltraci√≥n: suelos enmendados con compost y gravilla' },
      'RES-005': { base: 1.4, intermedio: 1.1, final: 0.8, obs: 'Reducci√≥n por xerojardiner√≠a: sustituci√≥n c√©sped por praderas naturales' },
      'RES-006': { base: 0.1, intermedio: 0.25, final: 0.4, obs: 'Sistema municipal de reutilizaci√≥n: cisterna pluvial 500m¬≥ + aguas grises' },
      'RES-007': { base: 2800, intermedio: 1200, final: 450, obs: 'Revegetaci√≥n con especies tapizantes: Festuca, Stipa, Thymus en taludes' },
      'RES-008': { base: 0, intermedio: 35, final: 80, obs: 'Incidente verano 2024: mejora de cortafuegos y eliminaci√≥n especies pir√≥fitas' },
      'RES-009': { base: 125000, intermedio: 78000, final: 45000, obs: 'Reducci√≥n da√±os por tormentas: arbolado resistente + drenaje mejorado' },
      'RES-010': { base: 42, intermedio: 31, final: 22, obs: 'Reducci√≥n por efecto isla de calor: 3¬∞C menos en zonas renaturalizadas' },
      'RES-011': { base: 0, intermedio: 0, final: 0, obs: 'Sin detecci√≥n Aedes albopictus: control estanques + eliminaci√≥n agua estancada' },
      'RES-012': { base: 78, intermedio: 65, final: 45, obs: 'Reducci√≥n por sustituci√≥n Platanus por Quercus ilex en avenidas principales' },
    };

    const valores = valoresEjemplo[indicadorData.codigo as keyof typeof valoresEjemplo];

    await prisma.valorIndicadorGeneral.create({
      data: {
        valor_linea_base: valores.base,
        valor_intermedio: valores.intermedio,
        valor_final: valores.final,
        fecha_medicion: new Date('2024-07-07'),
        observaciones: valores.obs,
        indicador_general_id: indicador.id,
      },
    });

    console.log(`   ‚úÖ ${indicadorData.codigo} creado con valores de ejemplo`);
  }

  console.log('üåä Indicadores RES implementados exitosamente!');
  console.log(`üìä Resumen:`);
  console.log(`   ‚Ä¢ ${indicadoresRES.length} Indicadores de Resiliencia (RES) creados`);
  console.log(`   ‚Ä¢ ${indicadoresRES.length} Conjuntos de valores de ejemplo`);
  console.log(`   ‚Ä¢ Proyecto asociado: ${proyecto.nombre}`);
  console.log('');
  console.log('üîç Indicadores creados:');
  indicadoresRES.forEach((ind, index) => {
    console.log(`   ${index + 1}. ${ind.codigo} - ${ind.indicador}`);
  });
}

main()
  .catch((e) => {
    console.error('‚ùå Error al implementar indicadores RES:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });